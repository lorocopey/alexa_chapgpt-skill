/**
 * Test para el sistema de cach√© de conversaciones
 * Simula m√∫ltiples usuarios interactuando con ChatGPT
 * 
 * Ejecutar con: node test-conversation-cache.js
 */

// Importar las funciones que queremos probar
const { getChatGPTResponse, clearUserConversation, getConversationStats } = require('./src/openai-client');

// Funci√≥n para simular un delay (para hacer las pruebas m√°s legibles)
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Funci√≥n para simular una conversaci√≥n con un usuario
async function simulateUserConversation(userId, messages) {
  console.log(`\nüß™ INICIANDO TEST PARA USUARIO: ${userId}`);
  console.log('----------------------------------------');

  for (const message of messages) {
    console.log(`\nüë§ [${userId}]: "${message}"`);
    
    try {
      // Enviar mensaje y obtener respuesta
      const response = await getChatGPTResponse(message, userId);
      console.log(`ü§ñ [Chapi]: "${response}"\n`);
      
      // Esperar un momento entre mensajes para mejor legibilidad
      await delay(500);
    } catch (error) {
      console.error(`‚ùå Error en test para usuario ${userId}:`, error);
    }
  }
  
  console.log('----------------------------------------\n');
}

// Funci√≥n principal de prueba
async function runTests() {
  console.log('üîç INICIANDO TESTS DE CACH√â DE CONVERSACIONES');
  console.log('============================================');

  // Test 1: Usuario simple con m√∫ltiples mensajes para verificar contexto
  await simulateUserConversation('usuario-test-1', [
    'Hola, me llamo Carlos',
    '¬øRecuerdas mi nombre?',
    'Cu√©ntame un dato curioso sobre las mariposas'
  ]);
  
  // Test 2: Otro usuario con una conversaci√≥n diferente
  await simulateUserConversation('usuario-test-2', [
    'Soy Ana y estoy aprendiendo a programar en JavaScript',
    '¬øQu√© recursos me recomiendas?',
    '¬øY qu√© opinas sobre React?'
  ]);
  
  // Test 3: Volver al primer usuario para verificar si mantiene su contexto
  await simulateUserConversation('usuario-test-1', [
    '¬øQu√© te hab√≠a preguntado antes?'
  ]);

  // Mostrar estad√≠sticas de cach√© despu√©s de las pruebas
  console.log('üìä ESTAD√çSTICAS DE CACH√â:');
  console.log(JSON.stringify(getConversationStats(), null, 2));
  
  // Limpiar la cach√© del usuario de prueba 
  console.log('\nüßπ Limpiando cach√© para usuario-test-1...');
  const deleted = clearUserConversation('usuario-test-1');
  console.log(`Cach√© eliminada: ${deleted}`);

  // Verificar nuevamente las estad√≠sticas
  console.log('\nüìä ESTAD√çSTICAS DE CACH√â DESPU√âS DE LIMPIAR:');
  console.log(JSON.stringify(getConversationStats(), null, 2));
}

// Ejecutar los tests
runTests().then(() => {
  console.log('\n‚úÖ TESTS COMPLETADOS');
}).catch(error => {
  console.error('‚ùå ERROR EN LOS TESTS:', error);
});
